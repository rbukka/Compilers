Grammar

    0 $accept: program $end

    1 program: program bexpr '\n'
    2        | /* empty */

    3 bexpr: bexpr OR bterm
    4      | bterm

    5 bterm: bterm AND bfactor
    6      | bfactor

    7 bfactor: NOT bfactor
    8        | LEFTP bexpr RIGHTP
    9        | expr relop expr

   10 relop: LT
   11      | GT
   12      | EQ
   13      | GEQ
   14      | LEQ
   15      | NEQ

   16 expr: INT
   17     | LEFTP expr RIGHTP
   18     | expr ADD expr
   19     | expr SUB expr
   20     | expr MULT expr
   21     | expr DIV expr
   22     | LINE INT


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
error (256)
INT (258) 16 22
GEQ (259) 13
LEQ (260) 14
GT (261) 11
LT (262) 10
EQ (263) 12
NEQ (264) 15
ADD (265) 18
SUB (266) 19
MULT (267) 20
DIV (268) 21
OR (269) 3
AND (270) 5
LEFTP (271) 8 17
RIGHTP (272) 8 17
LINE (273) 22
NOT (274) 7


Nonterminals, with rules where they appear

$accept (21)
    on left: 0
program (22)
    on left: 1 2, on right: 0 1
bexpr (23)
    on left: 3 4, on right: 1 3 8
bterm (24)
    on left: 5 6, on right: 3 4 5
bfactor (25)
    on left: 7 8 9, on right: 5 6 7
relop (26)
    on left: 10 11 12 13 14 15, on right: 9
expr (27)
    on left: 16 17 18 19 20 21 22, on right: 9 17 18 19 20 21


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . bexpr '\n'

    $end   shift, and go to state 2
    INT    shift, and go to state 3
    LEFTP  shift, and go to state 4
    LINE   shift, and go to state 5
    NOT    shift, and go to state 6

    bexpr    go to state 7
    bterm    go to state 8
    bfactor  go to state 9
    expr     go to state 10


state 2

    0 $accept: program $end .

    $default  accept


state 3

   16 expr: INT .

    $default  reduce using rule 16 (expr)


state 4

    8 bfactor: LEFTP . bexpr RIGHTP
   17 expr: LEFTP . expr RIGHTP

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 4
    LINE   shift, and go to state 5
    NOT    shift, and go to state 6

    bexpr    go to state 11
    bterm    go to state 8
    bfactor  go to state 9
    expr     go to state 12


state 5

   22 expr: LINE . INT

    INT  shift, and go to state 13


state 6

    7 bfactor: NOT . bfactor

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 4
    LINE   shift, and go to state 5
    NOT    shift, and go to state 6

    bfactor  go to state 14
    expr     go to state 10


state 7

    1 program: program bexpr . '\n'
    3 bexpr: bexpr . OR bterm

    OR    shift, and go to state 15
    '\n'  shift, and go to state 16


state 8

    4 bexpr: bterm .
    5 bterm: bterm . AND bfactor

    AND  shift, and go to state 17

    $default  reduce using rule 4 (bexpr)


state 9

    6 bterm: bfactor .

    $default  reduce using rule 6 (bterm)


state 10

    9 bfactor: expr . relop expr
   18 expr: expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr

    GEQ   shift, and go to state 18
    LEQ   shift, and go to state 19
    GT    shift, and go to state 20
    LT    shift, and go to state 21
    EQ    shift, and go to state 22
    NEQ   shift, and go to state 23
    ADD   shift, and go to state 24
    SUB   shift, and go to state 25
    MULT  shift, and go to state 26
    DIV   shift, and go to state 27

    relop  go to state 28


state 11

    3 bexpr: bexpr . OR bterm
    8 bfactor: LEFTP bexpr . RIGHTP

    OR      shift, and go to state 15
    RIGHTP  shift, and go to state 29


state 12

    9 bfactor: expr . relop expr
   17 expr: LEFTP expr . RIGHTP
   18     | expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr

    GEQ     shift, and go to state 18
    LEQ     shift, and go to state 19
    GT      shift, and go to state 20
    LT      shift, and go to state 21
    EQ      shift, and go to state 22
    NEQ     shift, and go to state 23
    ADD     shift, and go to state 24
    SUB     shift, and go to state 25
    MULT    shift, and go to state 26
    DIV     shift, and go to state 27
    RIGHTP  shift, and go to state 30

    relop  go to state 28


state 13

   22 expr: LINE INT .

    $default  reduce using rule 22 (expr)


state 14

    7 bfactor: NOT bfactor .

    $default  reduce using rule 7 (bfactor)


state 15

    3 bexpr: bexpr OR . bterm

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 4
    LINE   shift, and go to state 5
    NOT    shift, and go to state 6

    bterm    go to state 31
    bfactor  go to state 9
    expr     go to state 10


state 16

    1 program: program bexpr '\n' .

    $default  reduce using rule 1 (program)


state 17

    5 bterm: bterm AND . bfactor

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 4
    LINE   shift, and go to state 5
    NOT    shift, and go to state 6

    bfactor  go to state 32
    expr     go to state 10


state 18

   13 relop: GEQ .

    $default  reduce using rule 13 (relop)


state 19

   14 relop: LEQ .

    $default  reduce using rule 14 (relop)


state 20

   11 relop: GT .

    $default  reduce using rule 11 (relop)


state 21

   10 relop: LT .

    $default  reduce using rule 10 (relop)


state 22

   12 relop: EQ .

    $default  reduce using rule 12 (relop)


state 23

   15 relop: NEQ .

    $default  reduce using rule 15 (relop)


state 24

   18 expr: expr ADD . expr

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 34


state 25

   19 expr: expr SUB . expr

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 35


state 26

   20 expr: expr MULT . expr

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 36


state 27

   21 expr: expr DIV . expr

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 37


state 28

    9 bfactor: expr relop . expr

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 38


state 29

    8 bfactor: LEFTP bexpr RIGHTP .

    $default  reduce using rule 8 (bfactor)


state 30

   17 expr: LEFTP expr RIGHTP .

    $default  reduce using rule 17 (expr)


state 31

    3 bexpr: bexpr OR bterm .
    5 bterm: bterm . AND bfactor

    AND  shift, and go to state 17

    $default  reduce using rule 3 (bexpr)


state 32

    5 bterm: bterm AND bfactor .

    $default  reduce using rule 5 (bterm)


state 33

   17 expr: LEFTP . expr RIGHTP

    INT    shift, and go to state 3
    LEFTP  shift, and go to state 33
    LINE   shift, and go to state 5

    expr  go to state 39


state 34

   18 expr: expr . ADD expr
   18     | expr ADD expr .
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr

    MULT  shift, and go to state 26
    DIV   shift, and go to state 27

    $default  reduce using rule 18 (expr)


state 35

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   19     | expr SUB expr .
   20     | expr . MULT expr
   21     | expr . DIV expr

    MULT  shift, and go to state 26
    DIV   shift, and go to state 27

    $default  reduce using rule 19 (expr)


state 36

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   20     | expr MULT expr .
   21     | expr . DIV expr

    $default  reduce using rule 20 (expr)


state 37

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr
   21     | expr DIV expr .

    $default  reduce using rule 21 (expr)


state 38

    9 bfactor: expr relop expr .
   18 expr: expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr

    ADD   shift, and go to state 24
    SUB   shift, and go to state 25
    MULT  shift, and go to state 26
    DIV   shift, and go to state 27

    $default  reduce using rule 9 (bfactor)


state 39

   17 expr: LEFTP expr . RIGHTP
   18     | expr . ADD expr
   19     | expr . SUB expr
   20     | expr . MULT expr
   21     | expr . DIV expr

    ADD     shift, and go to state 24
    SUB     shift, and go to state 25
    MULT    shift, and go to state 26
    DIV     shift, and go to state 27
    RIGHTP  shift, and go to state 30
